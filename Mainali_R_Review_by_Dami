
---
title: "R_Assignment-Ashmita"
output: html_document
date: "2024-03-06"
---

```{r}
#Load applicable packages
library(readr)
library(tidyverse)
library(dplyr)
```

```{r}

#load text files "fang_et_al_genotypes.txt" and "snp_position.txt" as dataframe; pull from GitHub

fang_et_al <- read_tsv("https://github.com/EEOB-BioData/BCB546_Spring2024/raw/main/assignments/UNIX_Assignment/fang_et_al_genotypes.txt")
snp_position <- read_tsv("https://github.com/EEOB-BioData/BCB546_Spring2024/raw/main/assignments/UNIX_Assignment/snp_position.txt")

```

Part I: Data Inspection

1 fang_et_at.txt

```{r}
#Thanks for making the code readable by breaking into chunks and providing information about each line of code, I will certainly incoporate this into my work. 
#Analyze the structure and dimension of the file

str(fang_et_al)
#Dimensions: 2782x986 with only ‘character’ as a variable and missing data indicated by ‘?/?’
#number of columns: 986
#number of rows: 2782

View(fang_et_al)
#The data frame is displayed in a different tab

head(fang_et_al)
#Diplays the first 6 observations of the data set

tail(fang_et_al)
#Displays the last 6 observations of the data set

names(fang_et_al)
#Return column headers

is.data.frame(fang_et_al)
#True

file_size <- object.size(fang_et_al)
# Get the size of the loaded object

print(file_size)
# Print the file size: 23124584 bytes

```

2. snp_position.txt
```{r}
#Analyze the structure and dimension of the file

str(snp_position)
#Dimensions: 983x15 with ‘character’ and 'double' as a variable and missing data indicated by ‘?/?’
#number of columns:983
#number of rows:15

View(snp_position)
#The data frame is displayed in a different tab

head(snp_position)
#Obtain the first 6 observations of the data set

tail(snp_position)
#Obtain the last 6 observations of the data set

names(snp_position)
#Return column headers

is.data.frame(snp_position)
#True

file_size <- object.size(snp_position)
# Get the size of the loaded object

print(file_size)
# Print the file size: 359384 bytes

```
Part II: Data Processing

1. fang_et_al

```{r}
#Subsetting maize data (Group = ZMMIL, ZMMLR and ZMMMR)
maize <- filter(fang_et_al, Group %in% c("ZMMIL","ZMMLR","ZMMMR"))
#Remove extraneous information from maize, which includes columns 1-3
maize <- maize[-c(2:3)]
#Transpose maize file
maize_transposed <- t(maize)
#Set "Sample_ID" as the first column's name
maize_transposed <- maize_transposed[-1,]
```

```{r}
#Subsetting teosinte data (Group = ZMPBA, ZMPIL and ZMPJA)
teosinte <- filter(fang_et_al, Group %in% c("ZMPBA","ZMPIL","ZMPJA"))
#Remove extraneous information from teosinte, which includes columns 1-3
teosinte <- teosinte[-c(2:3)]
#Transpose teosinte file 
teosinte_transposed <- t(teosinte)
#Set "Sample_ID" as the first column's name
teosinte_transposed <- teosinte_transposed[-1,]
```

```{r}
#Remove extraneous information from snp_position, which includes columns 2 and 5-15, keeping only "SNP_ID," "Chromosome" and "Position"
snp_position <- snp_position[c(1,3,4)]

```


```{r}
#Merge transposed files with snp_position 
maize_snp <-  merge(snp_position,maize_transposed,by.x="SNP_ID", by.y="row.names")
teosinte_snp <-  merge(snp_position,teosinte_transposed,by.x = "SNP_ID",by.y = "row.names")
```

```{r}
# Create a directory for maize data
dir.create("maize", recursive = TRUE, showWarnings = FALSE)

# Loop over each chromosome
for (i in 1:10) {
  # Sort by Position in increasing order
  maize_chr_increasing <- maize_snp %>%
    filter(Chromosome == i) %>%
    arrange(as.numeric(as.character(Position)))
  
  # Write to file
  write.table(maize_chr_increasing,
              file = paste("maize/maize_increasing_chr", i, ".txt", sep = ""), 
              row.names = FALSE, sep = "\t", col.names = TRUE, quote = FALSE)
  
  # Sort by Position in decreasing order
  maize_chr_decreasing <- maize_snp %>%
    filter(Chromosome == i) %>%
    arrange(desc(as.numeric(as.character(Position)))) 
  
  # Replace "?/?" with "-/-"
  maize_chr_decreasing[maize_chr_decreasing == "?/?"] <- "-/-"
  
  # Write to file
  write.table(maize_chr_decreasing,
              file = paste("maize/maize_decreasing_chr", i, ".txt", sep = ""), 
              row.names = FALSE, sep = "\t", col.names = TRUE, quote = FALSE)
}


```

```{r}
# Create directory for teosinte data
dir.create("teosinte", recursive = TRUE, showWarnings = FALSE)

# Loop over each chromosome
for (i in 1:10) {
  # Sort by Position in increasing order
  teosinte_chr_increasing <- teosinte_snp %>%
    filter(Chromosome == i) %>%
    arrange(as.numeric(as.character(Position)))
  
  # Write to file
  write.table(teosinte_chr_increasing,
              file = paste("teosinte/teosinte_increasing_chr", i, ".txt", sep = ""), 
              row.names = FALSE, sep = "\t", col.names = TRUE, quote = FALSE)
  
  # Sort by Position in decreasing order
  teosinte_chr_decreasing <- teosinte_snp %>%
    filter(Chromosome == i) %>%
    arrange(desc(as.numeric(as.character(Position)))) 
  
  # Replace "?/?" with "-/-"
  teosinte_chr_decreasing[teosinte_chr_decreasing == "?/?"] <- "-/-"
  
  # Write to file
  write.table(teosinte_chr_decreasing,
              file = paste("teosinte/teosinte_decreasing_chr", i, ".txt", sep = ""), 
              row.names = FALSE, sep = "\t", col.names = TRUE, quote = FALSE)
}


```
Part III: Data Visualization


```{r}
# Calculate the number of SNPs per chromosome for maize and teosinte
maize_snps_per_chr <- maize_snp %>%
  group_by(Chromosome) %>%
  summarize(n = n())

teosinte_snps_per_chr <- teosinte_snp %>%
  group_by(Chromosome) %>%
  summarize(n = n())

# Combine the data frames for maize and teosinte, adding a Group column
snps_per_chr <- bind_rows(
  mutate(maize_snps_per_chr, Group = "Maize"),
  mutate(teosinte_snps_per_chr, Group = "Teosinte")
)

# Plot the bar plot
ggplot(snps_per_chr, aes(x = factor(Chromosome), y = n, fill = Group)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Number of SNPs per Chromosome",
       x = "Chromosome", y = "Number of SNPs") +
  scale_fill_manual(values = c("Maize" = "blue", "Teosinte" = "green")) +
  geom_text(aes(label = n), vjust = -1, position = position_dodge(width = 0.9)) + # Add text labels
  theme_minimal() +
  theme(panel.background = element_rect(fill = "white"),
        axis.text.x = element_text(size = 10, angle = 45, hjust = 1),  # Increase font size and angle x-axis labels
        axis.text.y = element_text(size = 10))  # Increase font size of y-axis labels

# Save the plot as an image file
ggsave('./Visualization/SNPs_number_comparison.png')

#Chromosome 1 has the most SNPs, whereas chromosome 10 has the least amount of SNPs for both maize and teosinte
#From the plots, there does not seem to be a difference between maize and teosinte in terms of the amount of SNP positions found in these two genotypes

```

Part I : Distribution of SNPs across Chromosome
```{r}
#I didnt know one could save the plot directly, I had to manually save the image. Thanks for teaching me this. However, it will also help if it can be printed to the screen at same time, this way you can ascertain if your plot/graph is desireable and provides the information needed
#Filtering out the 'unknown' and 'multiple' chromosomes values
filtered_snp_position <- filter(snp_position, Chromosome != "unknown" & Chromosome != "multiple")
filtered_maize_snp <- filter(maize_snp, Chromosome != "unknown" & Chromosome != "multiple")
filtered_teosinte_snp <- filter(teosinte_snp, Chromosome != "unknown" & Chromosome != "multiple")

#Plotting the overall distribution of SNPs across the chromosome
snp_dist_plot <- ggplot(filtered_snp_position, aes(x = as.numeric(as.character(Position)), fill = Chromosome)) + 
  geom_density() + 
  facet_wrap(~ Chromosome, nrow = 10, ncol = 2) + 
  theme_bw() + 
  labs(x = "Position", y = "Density")

#Plotting the distribution of SNPs across the chromosome for maize
maize_dist_plot <- ggplot(filtered_maize_snp, aes(x = as.numeric(as.character(Position)), fill = Chromosome)) + 
  geom_density() + 
  facet_wrap(~ Chromosome, nrow = 5, ncol = 2) + 
  theme_bw() + 
  labs(title = "Distribution of SNPs across the Chromosome", x = "Position", y = "Density")

#Plotting the distribution of SNPs across the chromosome for teosinte
teosinte_dist_plot <- ggplot(filtered_teosinte_snp, aes(x = as.numeric(as.character(Position)), fill = Chromosome)) + 
  geom_density() + 
  facet_wrap(~ Chromosome, nrow = 5, ncol = 2) + 
  theme_bw() + 
  labs(x = "Position", y = "Density")
# Save plots as PNG files
print(snp_dist_plot)
print(maize_dist_plot)
print(teosinte_dist_plot)
ggsave("./Visualization/snp_dist_plot.png", snp_dist_plot)
ggsave("./Visualization/maize_dist_plot.png", maize_dist_plot)
ggsave("./Visualization/teosinte_dist_plot.png", teosinte_dist_plot)

```

#Missing data and amount of heterozygosity 

```{r}

# Select relevant columns and pivot to long format
tidy_fang_genotypes <- fang_et_al %>%
  select(-JG_OTU) %>%
  pivot_longer(cols = -c(Sample_ID, Group), names_to = "SNP_ID", values_to = "Genotype")

# Categorize sequences into Homozygous, Heterozygous, or Missing
tidy_fang_genotypes <- tidy_fang_genotypes %>%
  mutate(genotype_varieties = case_when(
    Genotype %in% c("A/A", "T/T", "C/C", "G/G") ~ "Homozygous",
    Genotype == "?/?" ~ "Missing",
    TRUE ~ "Heterozygous"
  ))

# Plot proportions of sequences for each Sample_ID
Samples_Proportion <- ggplot(tidy_fang_genotypes, aes(x = Sample_ID, fill = genotype_varieties)) +
               
  geom_bar(position = "fill") +
               labs(x = "Sample_ID", y = "Proportion of genotype")

# Plot proportions of sequences for each Group
Groups_Proportion <- ggplot(tidy_fang_genotypes, aes(x = Group , fill = genotype_varieties)) +
              geom_bar(position = "fill") + 
              theme(axis.text.x = element_text(angle = 90)) + 
              labs(y = "Proportion of genotype")

# Save plots as PNG files
print(Samples_Proportion)
print(Groups_Proportion)
ggsave("./Visualization/Sample_Proportion.png", Samples_Proportion)
ggsave("./Visualization/Group_Proportion.png", Groups_Proportion)


```
#Own Visualization

```{r}
#Filtering our the 'unknown' and 'multiple' chromosomes 
filtered_maize_snp <- filter(maize_snp, Chromosome != "unknown" & Chromosome != "multiple")

# Select relevant columns and pivot to long format
tidy_maize_snp <- filtered_maize_snp %>%
  pivot_longer(cols = -c(Chromosome, SNP_ID, Position), values_to = "Genotype")

# Count occurrences of each genotype at each position
genotype_counts <- tidy_maize_snp %>%
  group_by(Position, Genotype) %>%
  summarise(count = n())

# Filter for missing genotypes
homozygous_genotypes <- genotype_counts %>%
  filter(Genotype %in% c("A/A", "T/T", "C/C", "G/G"))

# Scatter plot for missing genotypes with customized y-axis limits
homozygous_dst <- ggplot(homozygous_genotypes, aes(x = Position, y = count, color=Genotype)) +
  geom_point() + 
  scale_y_continuous(limits = c(0, 5000)) +
  labs(title = "Distribution of Homozygous SNP Genotype at Different Positions", x = "Position", y = "Number of Homozygous SNPs")

# Save plots as PNG files
print(homozygous_dst)
ggsave("./Visualization/homozygous_dst.png", homozygous_dst)

#Overall,this is well written R script and perfectly fits for the assignment. 
```


